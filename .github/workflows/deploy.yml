name: Nuxt CD

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

concurrency: ${{ github.workflow }}-${{ github.ref }}

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-24.04

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: TAG=${{ steps.meta.outputs.tags }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  # deploy:
  #   needs: build
  #   runs-on: ubuntu-24.04
  #   steps:
  #     #    docker pull ghcr.io/${{ github.actor }}/${{ github.repository }}:latest
  #     - name: Deploy to VPS
  #       uses: appleboy/ssh-action@v1.0.3
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USERNAME }}
  #         password: ${{ secrets.PASSWORD }}
  #         script: |
  #           docker stop ${{ env.REPO_NAME }}-${{ env.OLD_TAG }}
  #           docker rm ${{ env.REPO_NAME }}-${{ env.OLD_TAG }}
  #           docker rmi ${{ env.REPO_NAME }}:${{ env.OLD_TAG }}
  #           docker load --input ~/${{ env.REPO_NAME }}/artifact.tar
  #           docker run --name ${{ env.REPO_NAME }}-${{ env.NEW_TAG }} --env-file .env.prod -p ${{ env.IN_PORT }}:${{ env.OUT_PORT }} -d ${{ env.REPO_NAME }}:${{ env.NEW_TAG }}
