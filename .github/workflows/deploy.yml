name: Nuxt CD

run-name: ${{ github.ref_name }}

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*'

concurrency: ${{ github.workflow }}-${{ github.ref_name }}

env:
  REPO: ${{ github.repository }}
  REGISTRY: ghcr.io
  PORT: 1000

jobs:
  build:
    runs-on: ubuntu-24.04

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    outputs:
      image_name: ${{ steps.info.outputs.image_name }}
      image_title: ${{ steps.info.outputs.image_title }}
      buildtime: ${{ steps.info.outputs.buildtime }}
      version: ${{ steps.info.outputs.version }}

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }} # ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.GITHUB_TOKEN }} # ${{ secrets.REGISTRY_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO }}

      - name: Set tags as environment variable
        id: info
        run: |
          echo "Setting metadata to env variables"
          echo "::set-output name=image_name::${{ fromJSON(steps.metadata.outputs.json).tags[1] }}"
          echo "::set-output name=image_title::${{ fromJSON(steps.metadata.outputs.json).labels['org.opencontainers.image.title'] }}"
          echo "::set-output name=buildtime::${{ fromJSON(steps.metadata.outputs.json).labels['org.opencontainers.image.created'] }}"
          echo "::set-output name=version::${{ fromJSON(steps.metadata.outputs.json).labels['org.opencontainers.image.version'] }}"

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          build-args: |
            BUILDTIME=${{ steps.info.outputs.buildtime }}
            VERSION=${{ steps.info.outputs.version }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.REPO }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  deploy:
    needs: build
    runs-on: ubuntu-24.04

    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          script: |
            docker ps -q --filter ancestor=${{ needs.build.outputs.image_name }} | xargs -r docker stop
            docker ps -a -q --filter ancestor=${{ needs.build.outputs.image_name }} | xargs -r docker rm
            docker rmi ${{ needs.build.outputs.image_name }}
            docker pull ${{ needs.build.outputs.image_name }}
            docker run --detach --name ${{ needs.build.outputs.image_title }} \
              --mount type=bind,source=$(pwd)/${{ needs.build.outputs.image_title }}/static,target=/app/static,readonly \
              --env-file ~/${{ needs.build.outputs.image_title }}/.env.prod \
              -p ${{ env.PORT }}:3000 ${{ needs.build.outputs.image_name }}
